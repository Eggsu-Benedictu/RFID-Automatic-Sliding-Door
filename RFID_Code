#include <RFID.h>
#include <SPI.h> 
#include <Stepper.h>
Stepper bruh(2048,2,3,4,5);
RFID rfid(10, 9);       //D10:pin of tag reader SDA. D9:pin of tag reader RST 
unsigned char status; 
unsigned char str[MAX_LEN]; //MAX_LEN is 16: size of the array 
String accessGranted [1] = {"1338487214"};  //These are the acceptable Serial numbers
int accessGrantedSize = 1;                 //The number of serial numbers
int redLEDPin = 7;
int greenLEDPin = 8;
boolean locked = true;

void setup() 
{ 
  Serial.begin(9600);     //Serial monitor is only required to get tag ID numbers
  SPI.begin();            //Start SPI communication with reader
  rfid.init();            //initialization 
  pinMode(redLEDPin, OUTPUT);     //LEDs startup sequence (blinking)
  pinMode(greenLEDPin, OUTPUT);
  digitalWrite(redLEDPin, HIGH);
  delay(200);
  digitalWrite(greenLEDPin, HIGH);
  delay(200);
  digitalWrite(redLEDPin, LOW);
  delay(200);
  digitalWrite(greenLEDPin, LOW);
  bruh.setSpeed(14);
} 

void loop() 
{ 
  if (rfid.findCard(PICC_REQIDL, str) == MI_OK)   //Finds the card or tag on the scanner/reader
  {  
    String temp = "";                             //Temporary variable to store the read RFID number
    if (rfid.anticoll(str) == MI_OK)              //Anti-collision detection, read tag serial number 
    { 
      Serial.print("The card's ID number is : "); 
      for (int i = 0; i < 4; i++)                 //Record and display the tag serial number 
      { 
        temp = temp + (0x0F & (str[i] >> 4)); 
        temp = temp + (0x0F & str[i]); 
      } 
      Serial.println (temp);  // Displays the serial number the reader scanned. Can be used for configuration
      checkAccess (temp);     //Check if the identified tag is an allowed to open tag
    } 
    rfid.selectTag(str); //Prevents the reader from scanning continously
  }
  rfid.halt();
}

void checkAccess (String temp)    //Function to check if an identified tag is registered to allow access
{
  boolean granted = false;
  for (int i=0; i <= (accessGrantedSize-1); i++)    //Runs through all tag ID numbers registered in the array
  {
    if(accessGranted[i] == temp)            //If a tag is found then open the door
    {
      digitalWrite(greenLEDPin, HIGH);    //Green LED sequence
      delay(200);
      digitalWrite(greenLEDPin, LOW);
      delay(200);
      digitalWrite(greenLEDPin, HIGH);
      delay(200);
      digitalWrite(greenLEDPin, LOW);
      delay(200);
      Serial.println ("Access Granted");
      granted = true;
      if (locked == true)         //If the lock is closed then open it
      {
          bruh.step(-2048);
          bruh.step(-2048);
          delay(3000);
          locked == false;
          bruh.step(2048);
          bruh.step(2048);
          locked = true;       
      }
      else if (locked == false)   //If the door is open then close it. This part can be edited if the user wants to use the card two times (one for opening and one for closing)
      {
          locked = true;
      }
      digitalWrite(greenLEDPin, HIGH);    //Green LED sequence after the door closes
      delay(200);
      digitalWrite(greenLEDPin, LOW);
      delay(200);
      digitalWrite(greenLEDPin, HIGH);
      delay(200);
      digitalWrite(greenLEDPin, LOW);
      delay(200);
    }
  }
  if (granted == false)     //If the tag is not found in the list or invalid serial number was scanned, the door doesn't open.
  {
    Serial.println ("Access Denied");    
    digitalWrite(redLEDPin, HIGH);      //Instead, this Red LED sequence will tell you that you're not allowed to go in...or out. The buzzer is an added bonus
    delay(100);
    digitalWrite(redLEDPin, LOW);
    delay(100);
    digitalWrite(redLEDPin, HIGH);
    delay(100);
    digitalWrite(redLEDPin, LOW);
    delay(100);
    digitalWrite(redLEDPin, HIGH);
    delay(100);
    digitalWrite(redLEDPin, LOW);
  }
}
